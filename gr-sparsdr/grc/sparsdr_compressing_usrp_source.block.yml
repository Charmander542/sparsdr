# auto-generated by grc.converter

id: sparsdr_compressing_usrp_source
label: Compressing USRP Source
category: '[SparSDR]'
flags:
- throttle

parameters:
-   id: device_addr
    label: Device Address
    dtype: string
-   id: center_freq
    label: Center frequency
    dtype: real
-   id: gain
    label: Gain
    dtype: real
-   id: use_bin_spec
    label: Use bin specification
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['False', 'True']
    hide: 'part'
-   id: threshold
    label: Threshold
    dtype: real
    default: 1000
    hide: ${ ('all' if use_bin_spec else 'none') }
-   id: bin_spec
    label: Bin specification
    dtype: string
    default: 0..8:1
    hide: ${ ('none' if use_bin_spec else 'all') }
-   id: antenna
    label: Antenna
    dtype: string

outputs:
-   domain: stream
    dtype: sc16

templates:
    imports: |-
        import sparsdr
        from gnuradio import uhd
    make: |-
        sparsdr.compressing_usrp_source(uhd.device_addr(${device_addr}))
        self.${id}.set_center_freq(uhd.tune_request(${center_freq}))
        self.${id}.set_antenna(${antenna})
        self.${id}.set_gain(${gain})
        # Configure compression
        self.${id}.set_compression_enabled(True)
        self.${id}.stop_all()
        % if eval(use_bin_spec):
        self.${id}.set_bin_spec(${bin_spec})
        % else:
        # Clear masks and set threshold
        for i in range(2048):
            self.${id}.clear_bin_mask(i)
            self.${id}.set_bin_threshold(i, ${threshold})
        % endif
        # Start compression
        self.${id}.start_all()

file_format: 1
